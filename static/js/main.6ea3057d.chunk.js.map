{"version":3,"sources":["Footer/Footer.tsx","Results/Results.tsx","utils/getSpecifiedNumberOfRandomWords.ts","TypingInput/TypingInput.tsx","App.tsx","utils/triggerHeaderAnimation.ts","utils/addEscEventListenerToWindow.ts","utils/setLocalStorageColorsToOnLoad.ts","index.tsx"],"names":["Footer","href","Results","props","useState","wordsPerMinute","setWordsPerMinute","useEffect","currentNumberOfWordsPerMinute","id","className","getSpecifiedNumberOfRandomWords","numberOfRandomWords","arrayToReturn","Array","i","push","words","Math","floor","random","typingInputInitialState","TypingInput","wordArraySize","defaultBackgroundColor","defaultForegroundColor","referenceToInputElement","useRef","referenceToColorPickerDiv","referenceToBackgroundColorPickerDiv","referenceToForegroundColorPickerDiv","referenceToChangeColorsText","wordArrayIndex","setWordArrayIndex","foregroundColor","setForegroundColor","backgroundColor","setBackgroundColor","wordArray","setWordArray","startDateInMilisseconds","setStartDateInMilisseconds","colorPickerIsActive","setColorPickerIsActive","handleKeyPress","event","key","insertedWord","currentWord","currentSpanElement","document","querySelector","colorToFillSpanElementWith","wordElement","color","style","checkInputValue","currentTarget","value","trim","clearRefElementValue","Date","now","resetComponentState","optionalForegroundColorHex","querySelectorAll","forEach","element","current","focus","referenceToElement","hideColorPickerDivs","el","display","handleBackgroundColorChange","colorHex","background","localStorage","setItem","handleForegroundColorChange","localStorageForeground","getItem","localStorageBackground","type","onClick","removeItem","console","log","textContent","ref","role","aria-label","onChange","map","word","index","htmlFor","autoComplete","onKeyPress","evt","App","setInterval","headerPipe","getElementById","window","addEventListener","spanElement","click","onload","backgroundElements","foregroundElements","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ea3057d.chunk.js","sourcesContent":["import React from 'react';\r\nimport GithubCorner from 'react-github-corner'\r\n\r\nexport default function Footer(): JSX.Element {\r\n    return (\r\n        <GithubCorner href=\"https://github.com/JustAn0therDev/TypingSpeedTest\" />\r\n    )\r\n}\r\n","import './Results.css';\r\nimport IResults from '../Interfaces/IResults';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport default function Results(props: IResults): JSX.Element {\r\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWordsPerMinute(props.currentNumberOfWordsPerMinute);\r\n    }, [props.currentNumberOfWordsPerMinute]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divResults\">\r\n                <h1 className={\"foreground\"}>{wordsPerMinute} WPM</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import words from '../words.json';\r\n\r\nexport default function getSpecifiedNumberOfRandomWords(numberOfRandomWords: number) {\r\n    var arrayToReturn: string[] = new Array<string>();\r\n    for (let i = 0; i < numberOfRandomWords; i++) {\r\n        arrayToReturn.push(words['english'][Math.floor(Math.random() * 1000)]);\r\n    }\r\n\r\n    return arrayToReturn;\r\n}","import './typingInput.css';\r\nimport Results from '../Results/Results';\r\nimport { HexColorPicker } from 'react-colorful';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ITypingInputInitialState from '../Interfaces/ITypingInputInitialState';\r\nimport getSpecifiedNumberOfRandomWords from '../utils/getSpecifiedNumberOfRandomWords';\r\n\r\nconst typingInputInitialState: ITypingInputInitialState = {\r\n    wordArrayIndex: 0,\r\n    wordsPerMinute: 0,\r\n    startDateInMilisseconds: 0\r\n}\r\n\r\n// current bug:\r\n// 1 -> load the website for the first time with a different foreground color\r\n// 2 -> click the reset button \r\n// current behavior  -> the foreground color does not change unless you click the reset button twice\r\n// expected behavior -> the foreground color should have changed in the first click.\r\nexport default function TypingInput(): JSX.Element {\r\n    const wordArraySize = 15;\r\n\r\n    const defaultBackgroundColor = '#000000'; \r\n    const defaultForegroundColor = '#FFFFFF';\r\n\r\n    // Refs to mutable elements inside component.\r\n    const referenceToInputElement             = useRef<HTMLInputElement>(null);\r\n    const referenceToColorPickerDiv           = useRef<HTMLDivElement>(null);\r\n    const referenceToBackgroundColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToForegroundColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToChangeColorsText         = useRef<HTMLSpanElement>(null);\r\n\r\n    // State management\r\n    let [wordArrayIndex, setWordArrayIndex]                       = useState(0);\r\n    let [wordsPerMinute, setWordsPerMinute]                       = useState(0);\r\n    let [foregroundColor, setForegroundColor]                     = useState('');\r\n    let [backgroundColor, setBackgroundColor]                     = useState('');\r\n    let [wordArray, setWordArray]                                 = useState(new Array<string>());\r\n    let [startDateInMilisseconds, setStartDateInMilisseconds]     = useState(0);\r\n    let [colorPickerIsActive, setColorPickerIsActive]             = useState(false);\r\n\r\n    useEffect(() => {\r\n        let localStorageForeground = localStorage.getItem('tstfg');\r\n        let localStorageBackground = localStorage.getItem('tstbg');\r\n\r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordsPerMinute(0);\r\n\r\n        referenceToInputElement.current?.focus();\r\n\r\n        setForegroundColor(localStorageForeground ? localStorageForeground : defaultForegroundColor);\r\n        setBackgroundColor(localStorageBackground ? localStorageBackground : defaultBackgroundColor);\r\n    }, [])\r\n\r\n    function handleKeyPress(event: React.KeyboardEvent): void {\r\n        if (event.key === ' ') {\r\n            checkInputValue(event.currentTarget.value.trim());\r\n            clearRefElementValue(referenceToInputElement);\r\n            updateWordsPerMinute();\r\n        }\r\n    }\r\n\r\n    function updateWordsPerMinute(): void {\r\n        if (wordArrayIndex === 0) {\r\n            setStartDateInMilisseconds(Date.now());\r\n        } else if (wordArrayIndex === wordArraySize - 1) {\r\n            setWordsPerMinute(getWordsPerMinute());\r\n        }\r\n    }\r\n\r\n    function getWordsPerMinute(): number {\r\n        return Math.floor((wordArraySize / ((Date.now() - startDateInMilisseconds) / 1000 / 60)));\r\n    }\r\n\r\n    function resetComponentState(optionalForegroundColorHex?: string): void {\r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordArrayIndex(typingInputInitialState.wordArrayIndex);\r\n        setWordsPerMinute(typingInputInitialState.wordsPerMinute);\r\n\r\n        // the foregroundColor state is NOT being changed. This is really weird.\r\n        document.querySelectorAll<HTMLElement>('.foreground')?.forEach((element) => element.style.color = optionalForegroundColorHex ? optionalForegroundColorHex : foregroundColor );\r\n\r\n        clearRefElementValue(referenceToInputElement);\r\n        referenceToInputElement.current?.focus();\r\n    }\r\n\r\n    function clearRefElementValue(referenceToElement: React.RefObject<HTMLInputElement | null>): void {\r\n        if (referenceToElement && referenceToElement.current)\r\n            referenceToElement.current.value = '';\r\n    }\r\n\r\n    function checkInputValue(insertedWord: string | null): void {\r\n        const currentWord = wordArray[wordArrayIndex];\r\n        const currentSpanElement: HTMLSpanElement | null = document.querySelector<HTMLSpanElement>(`#${currentWord}${wordArrayIndex}`);\r\n        \r\n        let colorToFillSpanElementWith = '';\r\n        \r\n        insertedWord !== currentWord ? colorToFillSpanElementWith = '#FF0000' : colorToFillSpanElementWith = '#1ED760';\r\n        \r\n        markWordElementAsTypedIfElementFound(currentSpanElement, colorToFillSpanElementWith);\r\n        \r\n        setWordArrayIndex(wordArrayIndex + 1);\r\n    }\r\n\r\n    function markWordElementAsTypedIfElementFound(wordElement: HTMLElement | null, color: string): void {\r\n        if (wordElement)\r\n            wordElement.style.color = color;\r\n    }\r\n\r\n    function handleColorPickerClick() {\r\n        hideColorPickerDivs();\r\n\r\n        if (referenceToChangeColorsText && referenceToChangeColorsText.current) {\r\n            if (colorPickerIsActive) {\r\n                setColorPickerIsActive(false);\r\n                referenceToChangeColorsText.current.textContent = 'Change Colors';\r\n            } else {\r\n                setColorPickerIsActive(true);\r\n                referenceToChangeColorsText.current.textContent = 'Close';\r\n            }\r\n        }\r\n\r\n        if (referenceToColorPickerDiv.current) {\r\n            if(referenceToColorPickerDiv.current?.style.display === 'none') {\r\n                referenceToColorPickerDiv.current.style.display = 'block';\r\n            } else {\r\n                referenceToColorPickerDiv.current.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleBackgroundColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToBackgroundColorPickerDiv.current) {\r\n            if (referenceToBackgroundColorPickerDiv.current?.style.display === 'none') {\r\n                referenceToBackgroundColorPickerDiv.current.style.display = 'block';\r\n            } else {\r\n                referenceToBackgroundColorPickerDiv.current.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleForegroundColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToForegroundColorPickerDiv.current) {\r\n            if (referenceToForegroundColorPickerDiv.current?.style.display === 'none') {\r\n                referenceToForegroundColorPickerDiv.current.style.display = 'block';\r\n            } else {\r\n                referenceToForegroundColorPickerDiv.current.style.display = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    function hideColorPickerDivs() {\r\n        const colorPickerDivArray: NodeListOf<HTMLDivElement> = document.querySelectorAll<HTMLDivElement>('.color-picker');\r\n        colorPickerDivArray.forEach((el: HTMLDivElement) => { el.style.display = 'none' });\r\n    }\r\n\r\n    function handleBackgroundColorChange(colorHex: string) {\r\n        setBackgroundColor(colorHex);\r\n\r\n        document.querySelectorAll<HTMLDivElement>('.background')?.forEach((element: HTMLDivElement) => element.style.background = colorHex);\r\n        localStorage.setItem('tstbg', colorHex);\r\n    }\r\n\r\n    function handleForegroundColorChange(colorHex: string) {\r\n        setForegroundColor(colorHex);\r\n\r\n        document.querySelectorAll<HTMLElement>('.foreground')?.forEach((element: HTMLElement) => element.style.color = colorHex);\r\n        localStorage.setItem('tstfg', colorHex);\r\n    }\r\n\r\n    function handleColorReset() {\r\n        localStorage.removeItem('tstfg');\r\n        localStorage.removeItem('tstbg');\r\n\r\n        handleBackgroundColorChange(defaultBackgroundColor);\r\n        handleForegroundColorChange(defaultForegroundColor);\r\n\r\n        console.log(foregroundColor);\r\n        \r\n        resetComponentState(defaultForegroundColor);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id='divMainInput'>\r\n                <button type='button' className={'change-color-buttons'} onClick={handleColorReset}>Reset Colors</button>\r\n                <button type='button' className={'change-color change-color-buttons'} onClick={handleColorPickerClick}><span ref={referenceToChangeColorsText}>Change Colors</span></button>\r\n                <div id='div-color-picker' ref={referenceToColorPickerDiv} style={{display: 'none'}}>\r\n                    <button type='button' className={'change-background change-color-buttons'} onClick={handleBackgroundColorPickerClick}>Background <span role='img' aria-label='paintbrush'>🖌️</span></button>\r\n                    <button type='button' className={'change-foreground change-color-buttons'} onClick={handleForegroundColorPickerClick}>Foreground <span role='img' aria-label='paintbrush'>🖌️</span></button>\r\n                </div>\r\n\r\n                <div style={{display: 'none'}} ref={referenceToBackgroundColorPickerDiv} className={'color-picker'}>\r\n                    <HexColorPicker color={backgroundColor} onChange={(color) => { handleBackgroundColorChange(color) }} />\r\n                </div>\r\n\r\n                <div style={{display: 'none'}} ref={referenceToForegroundColorPickerDiv} className={'color-picker'}>\r\n                    <HexColorPicker color={foregroundColor} onChange={(color) => { handleForegroundColorChange(color) }} />\r\n                </div>\r\n\r\n                <span id='span-reset-typing-input-state' onClick={() => resetComponentState() }></span>\r\n                <div id='divMainWords'>\r\n                    {wordArray.map((word, index) => (<span className={'foreground'} id={`${word}${index}`} key={index}>{word}&nbsp;</span>))}\r\n                </div>\r\n                <div id='divWithLabelAndInput'>\r\n                    <label htmlFor='mainInput'>Press esc to reset:</label>\r\n                    <input\r\n                        id='mainInput'\r\n                        ref={referenceToInputElement}\r\n                        type='text' autoComplete='off'\r\n                        onKeyPress={(evt) => { handleKeyPress(evt); }}\r\n                    />\r\n                </div>\r\n                <Results currentNumberOfWordsPerMinute={wordsPerMinute} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport Footer from './Footer/Footer';\r\nimport TypingInput from './TypingInput/TypingInput';\r\nimport triggerHeaderAnimation from './utils/triggerHeaderAnimation';\r\nimport addEscEventListenerToWindow from './utils/addEscEventListenerToWindow';\r\nimport setLocalStorageColorsToOnLoad from './utils/setLocalStorageColorsToOnLoad';\r\n\r\nexport default function App() {\r\n  triggerHeaderAnimation();\r\n  addEscEventListenerToWindow();\r\n  setLocalStorageColorsToOnLoad();\r\n\r\n  return (\r\n    <div className=\"App background\">\r\n      <header className=\"App-header background\">\r\n        <h3>Typing Speed Test<span id=\"header-pipe\">|</span></h3>\r\n      </header>\r\n\r\n      <main>\r\n        <TypingInput />\r\n      </main>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}","export default function triggerHeaderAnimation(): void {\r\n    setInterval(() => {\r\n        const headerPipe = document.getElementById(\"header-pipe\");\r\n        if (headerPipe) {\r\n            headerPipe.style.display !== \"none\" \r\n            ? headerPipe.style.display = \"none\" \r\n            : headerPipe.style.display = \"inline\";\r\n        }\r\n    }, 600);\r\n}","export default function addEscEventListenerToWindow(): void {\r\n    window.addEventListener('keyup', (evt: KeyboardEvent) => {\r\n        if (evt.key === \"Escape\") {\r\n            const spanElement: HTMLSpanElement | null = document.querySelector('#span-reset-typing-input-state');\r\n            spanElement?.click();\r\n        }\r\n    });\r\n}","export default function setLocalStorageColorsToOnLoad() {\r\n    window.onload = function () {\r\n        const backgroundElements: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.background');\r\n        const foregroundElements: NodeListOf<HTMLSpanElement> | null = document.querySelectorAll('.foreground');\r\n\r\n        if (localStorage['tstbg']) {\r\n            backgroundElements.forEach((element: HTMLDivElement) => element.style.background = localStorage['tstbg']);\r\n        }\r\n\r\n        if (localStorage['tstfg']) {\r\n            foregroundElements.forEach((element: HTMLSpanElement) => element.style.color = localStorage['tstfg']);\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}