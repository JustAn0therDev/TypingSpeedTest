{"version":3,"sources":["Footer/github.svg","Footer/Footer.tsx","Results/Results.tsx","utils/getSpecifiedNumberOfRandomWords.ts","TypingInput/TypingInput.tsx","App.tsx","utils/triggerHeaderAnimation.ts","utils/addEscEventListenerToWindow.ts","index.tsx"],"names":["module","exports","Footer","href","target","rel","src","GitHubLogo","alt","Results","props","useState","wordsPerMinute","setWordsPerMinute","useEffect","currentNumberOfWordsPerMinute","id","getSpecifiedNumberOfRandomWords","numberOfRandomWords","arrayToReturn","Array","i","push","words","Math","floor","random","typingInputInitialState","TypingInput","referenceToInputElement","useRef","wordArray","setWordArray","wordArrayIndex","setWordArrayIndex","startDateInMilisseconds","setStartDateInMilisseconds","handleKeyPress","event","key","insertedWord","currentWord","currentSpanElement","document","getElementById","colorToPutOnSpanElement","wordElement","color","style","checkInputValue","currentTarget","value","trim","clearRefElementValue","Date","now","wordArraySize","referenceToElement","current","focus","type","onClick","from","getElementsByTagName","forEach","span","map","word","index","htmlFor","ref","autoComplete","onKeyPress","evt","App","setInterval","headerPipe","display","window","addEventListener","querySelector","click","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.07743634.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.f5a069d2.svg\";","import './Footer.css';\r\nimport React from 'react';\r\nimport GitHubLogo from './github.svg';\r\n\r\nexport default function Footer(): JSX.Element {\r\n    return (\r\n        <footer>\r\n            <a href=\"https://github.com/JustAn0therDev/TypingSpeedTest\" \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\">GitHub:&nbsp;<img src={GitHubLogo} alt=\"Github Logo\"></img></a>\r\n        </footer>\r\n    )\r\n}","import './Results.css';\r\nimport IResults from '../Interfaces/IResults';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport default function Results(props: IResults): JSX.Element {\r\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWordsPerMinute(props.currentNumberOfWordsPerMinute);\r\n    }, [props.currentNumberOfWordsPerMinute]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divResults\">\r\n                <h1>{wordsPerMinute} WPM</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}","import words from '../words.json';\r\n\r\nexport default function getSpecifiedNumberOfRandomWords(numberOfRandomWords: number) {\r\n    var arrayToReturn: string[] = new Array<string>();\r\n    for (let i = 0; i < numberOfRandomWords; i++) {\r\n        arrayToReturn.push(words['english'][Math.floor(Math.random() * 1000)]);\r\n    }\r\n\r\n    return arrayToReturn;\r\n}","import './TypingInput.css';\r\nimport Results from '../Results/Results';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ITypingInputInitialState from '../Interfaces/ITypingInputInitialState';\r\nimport getSpecifiedNumberOfRandomWords from '../utils/getSpecifiedNumberOfRandomWords';\r\n\r\nconst typingInputInitialState: ITypingInputInitialState = {\r\n    wordArrayIndex: 0,\r\n    wordsPerMinute: 0,\r\n    startDateInMilisseconds: 0\r\n}\r\n\r\nexport default function TypingInput(): JSX.Element {\r\n    const wordArraySize = 15;\r\n    const referenceToInputElement = useRef<HTMLInputElement>(null);\r\n\r\n    let [wordArray, setWordArray] = useState(new Array<string>());\r\n    let [wordArrayIndex, setWordArrayIndex] = useState(0);\r\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\r\n    let [startDateInMilisseconds, setStartDateInMilisseconds] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordsPerMinute(0);\r\n        referenceToInputElement.current?.focus();\r\n    }, []);\r\n\r\n    function handleKeyPress(event: React.KeyboardEvent): void {\r\n        if (event.key === ' ') {\r\n            checkInputValue(event.currentTarget.value.trim());\r\n            clearRefElementValue(referenceToInputElement);\r\n            updateWordsPerMinute();\r\n        }\r\n    }\r\n\r\n    function updateWordsPerMinute(): void {\r\n        if (wordArrayIndex === 0) {\r\n            setStartDateInMilisseconds(Date.now());\r\n        } else if (wordArrayIndex === wordArraySize - 1) {\r\n            setWordsPerMinute(getWordsPerMinute());\r\n        }\r\n    }\r\n\r\n    function getWordsPerMinute(): number {\r\n        return Math.floor((wordArraySize / ((Date.now() - startDateInMilisseconds) / 1000 / 60)));\r\n    }\r\n\r\n    function resetComponentState() {\r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordArrayIndex(typingInputInitialState.wordArrayIndex);\r\n        setWordsPerMinute(typingInputInitialState.wordsPerMinute);\r\n\r\n        Array.from(document.getElementsByTagName('span')).forEach(span => span.style.color = '#ffffff');\r\n\r\n        clearRefElementValue(referenceToInputElement);\r\n        referenceToInputElement.current?.focus();\r\n    }\r\n\r\n    function clearRefElementValue(referenceToElement: React.RefObject<HTMLInputElement | null>): void {\r\n        if (referenceToElement && referenceToElement.current)\r\n            referenceToElement.current.value = '';\r\n    }\r\n\r\n    function checkInputValue(insertedWord: string | null): void {\r\n        const currentWord = wordArray[wordArrayIndex];\r\n        const currentSpanElement: HTMLElement | null = document.getElementById(`${currentWord}${wordArrayIndex}`);\r\n\r\n        let colorToPutOnSpanElement = \"\";\r\n        \r\n        insertedWord !== currentWord \r\n        ? colorToPutOnSpanElement = \"#ff0000\" \r\n        : colorToPutOnSpanElement = \"#1ED760\";\r\n        \r\n        if (currentSpanElement)\r\n           markWordElementAsTyped(currentSpanElement, colorToPutOnSpanElement);\r\n        \r\n        setWordArrayIndex(wordArrayIndex + 1);\r\n    }\r\n\r\n    function markWordElementAsTyped(wordElement: HTMLElement, color: string): void {\r\n        wordElement.style.color = color;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divMainInput\">\r\n                <button type=\"button\" onClick={resetComponentState}>Reset (Esc)</button>\r\n                <div id=\"divMainWords\">\r\n                    {wordArray.map((word, index) => (<span id={`${word}${index}`} key={index}>{word}&nbsp;</span>))}\r\n                </div>\r\n                <div id=\"divWithLabelAndInput\">\r\n                    <label htmlFor=\"mainInput\">Type here:</label>\r\n                    <input\r\n                        id=\"mainInput\"\r\n                        ref={referenceToInputElement}\r\n                        type=\"text\" autoComplete=\"off\"\r\n                        onKeyPress={(evt) => { handleKeyPress(evt); }}\r\n                    />\r\n                </div>\r\n                <Results currentNumberOfWordsPerMinute={wordsPerMinute} />\r\n            </div>\r\n        </>\r\n    )\r\n}","import './App.css';\r\nimport React from 'react';\r\nimport Footer from './Footer/Footer';\r\nimport TypingInput from './TypingInput/TypingInput';\r\nimport triggerHeaderAnimation from './utils/triggerHeaderAnimation';\r\nimport addEscEventListenerToWindow from './utils/addEscEventListenerToWindow';\r\n\r\nexport default function App() {\r\n  triggerHeaderAnimation();\r\n  addEscEventListenerToWindow();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h3>Typing Speed Test<span id=\"header-pipe\">|</span></h3>\r\n      </header>\r\n\r\n      <main>\r\n        <TypingInput />\r\n      </main>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}","export default function triggerHeaderAnimation(): void {\r\n    setInterval(() => {\r\n        const headerPipe = document.getElementById(\"header-pipe\");\r\n        if (headerPipe) {\r\n            headerPipe.style.display !== \"none\" \r\n            ? headerPipe.style.display = \"none\" \r\n            : headerPipe.style.display = \"inline\";\r\n        }\r\n    }, 600);\r\n}","export default function addEscEventListenerToWindow(): void {\r\n    window.addEventListener('keyup', (evt: KeyboardEvent) => {\r\n        if (evt.key === \"Escape\") {\r\n            document.querySelector('button')?.click();\r\n        }\r\n    });\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}