{"version":3,"sources":["Footer/Footer.tsx","Results/Results.tsx","utils/getSpecifiedNumberOfRandomWords.ts","TypingInput/TypingInput.tsx","App.tsx","utils/triggerHeaderAnimation.ts","utils/addEscEventListenerToWindow.ts","utils/setLocalStorageColorsToOnLoad.ts","index.tsx"],"names":["Footer","href","Results","props","useState","wordsPerMinute","setWordsPerMinute","useEffect","currentNumberOfWordsPerMinute","id","className","getSpecifiedNumberOfRandomWords","numberOfRandomWords","arrayToReturn","Array","i","push","words","Math","floor","random","typingInputInitialState","TypingInput","wordArraySize","defaultBackgroundColor","defaultForegroundColor","referenceToInputElement","useRef","referenceToColorPickerDiv","referenceToBackgroundColorPickerDiv","referenceToForegroundColorPickerDiv","referenceToChangeColorsText","wordArrayIndex","setWordArrayIndex","localStorage","getItem","foregroundColor","setForegroundColor","backgroundColor","setBackgroundColor","wordArray","setWordArray","startDateInMilisseconds","setStartDateInMilisseconds","colorPickerIsActive","setColorPickerIsActive","handleKeyPress","event","key","insertedWord","currentWord","currentSpanElement","document","querySelector","colorToFillSpanElementWith","wordElement","color","style","checkInputValue","currentTarget","value","trim","clearRefElementValue","Date","now","resetComponentState","currentForegroundColor","querySelectorAll","forEach","element","current","focus","referenceToElement","hideColorPickerDivs","el","display","handleBackgroundColorChange","colorHex","background","setItem","handleForegroundColorChange","type","onClick","textContent","ref","role","aria-label","onChange","map","word","index","htmlFor","autoComplete","onKeyPress","evt","App","setInterval","headerPipe","getElementById","window","addEventListener","spanElement","click","onload","backgroundElements","foregroundElements","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3002bbcc.chunk.js","sourcesContent":["import React from 'react';\nimport GithubCorner from 'react-github-corner'\n\nexport default function Footer(): JSX.Element {\n    return (\n        <GithubCorner href=\"https://github.com/JustAn0therDev/TypingSpeedTest\" />\n    )\n}\n","import './Results.css';\nimport IResults from '../Interfaces/IResults';\nimport React, { useEffect, useState } from 'react';\n\nexport default function Results(props: IResults): JSX.Element {\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\n\n    useEffect(() => {\n        setWordsPerMinute(props.currentNumberOfWordsPerMinute);\n    }, [props.currentNumberOfWordsPerMinute]);\n\n    return (\n        <>\n            <div id=\"divResults\">\n                <h1 className={\"foreground\"}>{wordsPerMinute} WPM</h1>\n            </div>\n        </>\n    );\n}\n","import words from '../words.json';\n\nexport default function getSpecifiedNumberOfRandomWords(numberOfRandomWords: number) {\n    var arrayToReturn: string[] = new Array<string>();\n    for (let i = 0; i < numberOfRandomWords; i++) {\n        arrayToReturn.push(words['english'][Math.floor(Math.random() * 1000)]);\n    }\n\n    return arrayToReturn;\n}","import './typingInput.css';\nimport Results from '../Results/Results';\nimport { HexColorPicker } from 'react-colorful';\nimport React, { useState, useEffect, useRef } from 'react';\nimport ITypingInputInitialState from '../Interfaces/ITypingInputInitialState';\nimport getSpecifiedNumberOfRandomWords from '../utils/getSpecifiedNumberOfRandomWords';\n\nconst typingInputInitialState: ITypingInputInitialState = {\n    wordArrayIndex: 0,\n    wordsPerMinute: 0,\n    startDateInMilisseconds: 0\n}\n\nexport default function TypingInput(): JSX.Element {\n    const wordArraySize = 15;\n\n    const defaultBackgroundColor = '#000000'; \n    const defaultForegroundColor = '#FFFFFF';\n\n    // Refs to mutable elements inside component.\n    // That way we don't need a lot of other smaller components with their own logic to control the visibility of the color-pickers\n    const referenceToInputElement             = useRef<HTMLInputElement>(null);\n    const referenceToColorPickerDiv           = useRef<HTMLDivElement>(null);\n    const referenceToBackgroundColorPickerDiv = useRef<HTMLDivElement>(null);\n    const referenceToForegroundColorPickerDiv = useRef<HTMLDivElement>(null);\n    const referenceToChangeColorsText         = useRef<HTMLSpanElement>(null);\n\n    let [wordArrayIndex, setWordArrayIndex]                       = useState(0);\n    let [wordsPerMinute, setWordsPerMinute]                       = useState(0);\n    let [foregroundColor, setForegroundColor]                     = useState(() => localStorage.getItem('tstfg') || defaultForegroundColor);\n    let [backgroundColor, setBackgroundColor]                     = useState(() => localStorage.getItem('tstbg') || defaultBackgroundColor);\n    let [wordArray, setWordArray]                                 = useState(new Array<string>());\n    let [startDateInMilisseconds, setStartDateInMilisseconds]     = useState(0);\n    let [colorPickerIsActive, setColorPickerIsActive]             = useState(false);\n\n    useEffect(() => {\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\n        setWordsPerMinute(0);\n\n        referenceToInputElement.current?.focus();\n    }, [])\n\n    function handleKeyPress(event: React.KeyboardEvent): void {\n        if (event.key === ' ') {\n            checkInputValue(event.currentTarget.value.trim());\n            clearRefElementValue(referenceToInputElement);\n            updateWordsPerMinute();\n        }\n    }\n\n    function updateWordsPerMinute(): void {\n        if (wordArrayIndex === 0) {\n            setStartDateInMilisseconds(Date.now());\n        } else if (wordArrayIndex === wordArraySize - 1) {\n            setWordsPerMinute(getWordsPerMinute());\n        }\n    }\n\n    function getWordsPerMinute(): number {\n        return Math.floor((wordArraySize / ((Date.now() - startDateInMilisseconds) / 1000 / 60)));\n    }\n\n    function resetComponentState(): void {\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\n        setWordArrayIndex(typingInputInitialState.wordArrayIndex);\n        setWordsPerMinute(typingInputInitialState.wordsPerMinute);\n\n        let currentForegroundColor = localStorage.getItem('tstfg') || defaultForegroundColor;\n\n        document.querySelectorAll<HTMLElement>('.foreground')?.forEach((element) => { element.style.color = currentForegroundColor; } );\n\n        clearRefElementValue(referenceToInputElement);\n        referenceToInputElement.current?.focus();\n    }\n\n    function clearRefElementValue(referenceToElement: React.RefObject<HTMLInputElement | null>): void {\n        if (referenceToElement && referenceToElement.current)\n            referenceToElement.current.value = '';\n    }\n\n    function checkInputValue(insertedWord: string | null): void {\n        const currentWord = wordArray[wordArrayIndex];\n        const currentSpanElement: HTMLSpanElement | null = document.querySelector<HTMLSpanElement>(`#${currentWord}${wordArrayIndex}`);\n        \n        let colorToFillSpanElementWith = '';\n        \n        insertedWord !== currentWord ? colorToFillSpanElementWith = '#FF0000' : colorToFillSpanElementWith = '#1ED760';\n        \n        markWordElementAsTypedIfElementFound(currentSpanElement, colorToFillSpanElementWith);\n        \n        setWordArrayIndex(wordArrayIndex + 1);\n    }\n\n    function markWordElementAsTypedIfElementFound(wordElement: HTMLElement | null, color: string): void {\n        if (wordElement)\n            wordElement.style.color = color;\n    }\n\n    function handleColorPickerClick() {\n        hideColorPickerDivs();\n\n        if (referenceToChangeColorsText && referenceToChangeColorsText.current) {\n            if (colorPickerIsActive) {\n                setColorPickerIsActive(false);\n                referenceToChangeColorsText.current.textContent = 'Change Colors';\n            } else {\n                setColorPickerIsActive(true);\n                referenceToChangeColorsText.current.textContent = 'Close';\n            }\n        }\n\n        if (referenceToColorPickerDiv.current) {\n            if(referenceToColorPickerDiv.current?.style.display === 'none') {\n                referenceToColorPickerDiv.current.style.display = 'block';\n            } else {\n                referenceToColorPickerDiv.current.style.display = 'none';\n            }\n        }\n    }\n\n    function handleBackgroundColorPickerClick() {\n        hideColorPickerDivs();\n        if (referenceToBackgroundColorPickerDiv.current) {\n            if (referenceToBackgroundColorPickerDiv.current?.style.display === 'none') {\n                referenceToBackgroundColorPickerDiv.current.style.display = 'block';\n            } else {\n                referenceToBackgroundColorPickerDiv.current.style.display = 'none';\n            }\n        }\n    }\n\n    function handleForegroundColorPickerClick() {\n        hideColorPickerDivs();\n        if (referenceToForegroundColorPickerDiv.current) {\n            if (referenceToForegroundColorPickerDiv.current?.style.display === 'none') {\n                referenceToForegroundColorPickerDiv.current.style.display = 'block';\n            } else {\n                referenceToForegroundColorPickerDiv.current.style.display = 'none';\n            }\n        }\n    }\n\n    function hideColorPickerDivs() {\n        const colorPickerDivArray: NodeListOf<HTMLDivElement> = document.querySelectorAll<HTMLDivElement>('.color-picker');\n        colorPickerDivArray.forEach((el: HTMLDivElement) => { el.style.display = 'none' });\n    }\n\n    function handleBackgroundColorChange(colorHex: string) {\n        setBackgroundColor(colorHex);\n\n        document.querySelectorAll<HTMLDivElement>('.background')?.forEach((element: HTMLDivElement) => element.style.background = colorHex);\n        localStorage.setItem('tstbg', colorHex);\n    }\n\n    function handleForegroundColorChange(colorHex: string) {\n        setForegroundColor(colorHex);\n\n        document.querySelectorAll<HTMLElement>('.foreground')?.forEach((element: HTMLElement) => element.style.color = colorHex);\n        localStorage.setItem('tstfg', colorHex);\n    }\n\n    function handleColorReset() {\n        handleBackgroundColorChange(defaultBackgroundColor);\n        handleForegroundColorChange(defaultForegroundColor);\n        \n        resetComponentState();\n    }\n\n    return (\n        <>\n            <div id='divMainInput'>\n                <button type='button' className={'change-color-buttons'} onClick={handleColorReset}>Reset Colors</button>\n                <button type='button' className={'change-color change-color-buttons'} onClick={handleColorPickerClick}><span ref={referenceToChangeColorsText}>Change Colors</span></button>\n                <div id='div-color-picker' ref={referenceToColorPickerDiv} style={{display: 'none'}}>\n                    <button type='button' className={'change-background change-color-buttons'} onClick={handleBackgroundColorPickerClick}>Background <span role='img' aria-label='paintbrush'>🖌️</span></button>\n                    <button type='button' className={'change-foreground change-color-buttons'} onClick={handleForegroundColorPickerClick}>Foreground <span role='img' aria-label='paintbrush'>🖌️</span></button>\n                </div>\n\n                <div style={{display: 'none'}} ref={referenceToBackgroundColorPickerDiv} className={'color-picker'}>\n                    <HexColorPicker color={backgroundColor} onChange={(color) => { handleBackgroundColorChange(color) }} />\n                </div>\n\n                <div style={{display: 'none'}} ref={referenceToForegroundColorPickerDiv} className={'color-picker'}>\n                    <HexColorPicker color={foregroundColor} onChange={(color) => { handleForegroundColorChange(color) }} />\n                </div>\n\n                <span id='span-reset-typing-input-state' onClick={() => resetComponentState() }></span>\n                <div id='divMainWords'>\n                    {wordArray.map((word, index) => (<span className={'foreground'} id={`${word}${index}`} key={index}>{word}&nbsp;</span>))}\n                </div>\n                <div id='divWithLabelAndInput'>\n                    <label htmlFor='mainInput'>Press esc to reset:</label>\n                    <input\n                        id='mainInput'\n                        ref={referenceToInputElement}\n                        type='text' autoComplete='off'\n                        onKeyPress={(evt) => { handleKeyPress(evt); }}\n                    />\n                </div>\n                <Results currentNumberOfWordsPerMinute={wordsPerMinute} />\n            </div>\n        </>\n    )\n}\n","import './App.css';\nimport React from 'react';\nimport Footer from './Footer/Footer';\nimport TypingInput from './TypingInput/TypingInput';\nimport triggerHeaderAnimation from './utils/triggerHeaderAnimation';\nimport addEscEventListenerToWindow from './utils/addEscEventListenerToWindow';\nimport setLocalStorageColorsToOnLoad from './utils/setLocalStorageColorsToOnLoad';\n\nexport default function App() {\n  triggerHeaderAnimation();\n  addEscEventListenerToWindow();\n  setLocalStorageColorsToOnLoad();\n\n  return (\n    <div className=\"App background\">\n      <header className=\"App-header background\">\n        <h3>Typing Speed Test<span id=\"header-pipe\">|</span></h3>\n      </header>\n\n      <main>\n        <TypingInput />\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","export default function triggerHeaderAnimation(): void {\n    setInterval(() => {\n        const headerPipe = document.getElementById(\"header-pipe\");\n        if (headerPipe) {\n            headerPipe.style.display !== \"none\" \n            ? headerPipe.style.display = \"none\" \n            : headerPipe.style.display = \"inline\";\n        }\n    }, 600);\n}","export default function addEscEventListenerToWindow(): void {\n    window.addEventListener('keyup', (evt: KeyboardEvent) => {\n        if (evt.key === \"Escape\") {\n            const spanElement: HTMLSpanElement | null = document.querySelector('#span-reset-typing-input-state');\n            spanElement?.click();\n        }\n    });\n}","export default function setLocalStorageColorsToOnLoad() {\n    window.onload = function () {\n        const backgroundElements: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.background');\n        const foregroundElements: NodeListOf<HTMLSpanElement> | null = document.querySelectorAll('.foreground');\n\n        if (localStorage['tstbg']) {\n            backgroundElements.forEach((element: HTMLDivElement) => element.style.background = localStorage['tstbg']);\n        }\n\n        if (localStorage['tstfg']) {\n            foregroundElements.forEach((element: HTMLSpanElement) => element.style.color = localStorage['tstfg']);\n        }\n\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}