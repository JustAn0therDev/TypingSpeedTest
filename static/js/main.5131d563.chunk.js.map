{"version":3,"sources":["Footer/github.svg","Footer/Footer.tsx","Results/Results.tsx","utils/getSpecifiedNumberOfRandomWords.ts","TypingInput/TypingInput.tsx","App.tsx","utils/triggerHeaderAnimation.ts","utils/addEscEventListenerToWindow.ts","utils/setLocalStorageColorsToOnLoad.ts","index.tsx"],"names":["Footer","href","target","rel","src","GitHubLogo","alt","Results","props","useState","wordsPerMinute","setWordsPerMinute","useEffect","currentNumberOfWordsPerMinute","id","className","getSpecifiedNumberOfRandomWords","numberOfRandomWords","arrayToReturn","Array","i","push","words","Math","floor","random","typingInputInitialState","TypingInput","wordArraySize","backgroundElements","document","querySelectorAll","foregroundElements","defaultBackgroundColor","defaultForegroundColor","referenceToInputElement","useRef","referenceToColorPickerDiv","referenceToBackgroundColorPickerDiv","referenceToForegroundColorPickerDiv","referenceToChangeColorsText","wordArrayIndex","setWordArrayIndex","foregroundColor","setForegroundColor","backgroundColor","setBackgroundColor","wordArray","setWordArray","startDateInMilisseconds","setStartDateInMilisseconds","colorPickerIsActive","setColorPickerIsActive","handleKeyPress","event","key","insertedWord","currentWord","currentSpanElement","querySelector","colorToFillSpanElementWith","wordElement","color","style","checkInputValue","currentTarget","value","trim","clearRefElementValue","Date","now","referenceToElement","current","hideColorPickerDivs","forEach","el","display","localStorageBackground","window","localStorage","getItem","localStorageForeground","focus","textContent","type","onClick","setItem","location","reload","ref","role","aria-label","onChange","colorHex","length","element","background","span","map","word","index","htmlFor","autoComplete","onKeyPress","evt","App","setInterval","headerPipe","getElementById","addEventListener","spanElement","click","onload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5131d563.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github.ca3156b4.svg\";","import './Footer.css';\r\nimport React from 'react';\r\nimport GitHubLogo from './github.svg';\r\n\r\nexport default function Footer(): JSX.Element {\r\n    return (\r\n        <footer>\r\n            <a href=\"https://github.com/JustAn0therDev/TypingSpeedTest\" \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\">GitHub:&nbsp;<img src={GitHubLogo} alt=\"Github Logo\"></img></a>\r\n        </footer>\r\n    )\r\n}","import './Results.css';\r\nimport IResults from '../Interfaces/IResults';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport default function Results(props: IResults): JSX.Element {\r\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWordsPerMinute(props.currentNumberOfWordsPerMinute);\r\n    }, [props.currentNumberOfWordsPerMinute]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divResults\">\r\n                <h1 className={\"foreground\"}>{wordsPerMinute} WPM</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}","import words from '../words.json';\r\n\r\nexport default function getSpecifiedNumberOfRandomWords(numberOfRandomWords: number) {\r\n    var arrayToReturn: string[] = new Array<string>();\r\n    for (let i = 0; i < numberOfRandomWords; i++) {\r\n        arrayToReturn.push(words['english'][Math.floor(Math.random() * 1000)]);\r\n    }\r\n\r\n    return arrayToReturn;\r\n}","import './TypingInput.css';\r\nimport Results from '../Results/Results';\r\nimport { HexColorPicker } from 'react-colorful';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ITypingInputInitialState from '../Interfaces/ITypingInputInitialState';\r\nimport getSpecifiedNumberOfRandomWords from '../utils/getSpecifiedNumberOfRandomWords';\r\n\r\nconst typingInputInitialState: ITypingInputInitialState = {\r\n    wordArrayIndex: 0,\r\n    wordsPerMinute: 0,\r\n    startDateInMilisseconds: 0\r\n}\r\n\r\nexport default function TypingInput(): JSX.Element {\r\n    const wordArraySize = 15;\r\n    const backgroundElements: NodeListOf<HTMLDivElement>  | null  = document.querySelectorAll('.background');\r\n    const foregroundElements: NodeListOf<HTMLSpanElement> | null  = document.querySelectorAll('.foreground');\r\n    const defaultBackgroundColor = '#000000'; \r\n    const defaultForegroundColor = '#FFFFFF';\r\n\r\n    // Refs to mutable elements inside component.\r\n    const referenceToInputElement             = useRef<HTMLInputElement>(null);\r\n    const referenceToColorPickerDiv           = useRef<HTMLDivElement>(null);\r\n    const referenceToBackgroundColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToForegroundColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToChangeColorsText         = useRef<HTMLSpanElement>(null);\r\n\r\n    // State management\r\n    let [wordArrayIndex, setWordArrayIndex]                   = useState(0);\r\n    let [wordsPerMinute, setWordsPerMinute]                   = useState(0);\r\n    let [foregroundColor, setForegroundColor]                 = useState('');\r\n    let [backgroundColor, setBackgroundColor]                 = useState('');\r\n    let [wordArray, setWordArray]                             = useState(new Array<string>());\r\n    let [startDateInMilisseconds, setStartDateInMilisseconds] = useState(0);\r\n    let [colorPickerIsActive, setColorPickerIsActive]         = useState(false);\r\n\r\n    useEffect(() => {\r\n        const localStorageBackground = window.localStorage.getItem('tstbg');\r\n        const localStorageForeground = window.localStorage.getItem('tstfg');\r\n        \r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordsPerMinute(0);\r\n        \r\n        referenceToInputElement.current?.focus();\r\n\r\n        setForegroundColor(localStorageForeground ? localStorageForeground : defaultForegroundColor);\r\n        setBackgroundColor(localStorageBackground ? localStorageBackground : defaultBackgroundColor);\r\n\r\n        if (referenceToChangeColorsText.current) {\r\n            if (colorPickerIsActive) {\r\n                referenceToChangeColorsText.current.textContent = \"Close\";\r\n            } else {\r\n                referenceToChangeColorsText.current.textContent = \"Change Colors\";\r\n            }\r\n        }\r\n    }, [colorPickerIsActive])\r\n\r\n    function handleKeyPress(event: React.KeyboardEvent): void {\r\n        if (event.key === ' ') {\r\n            checkInputValue(event.currentTarget.value.trim());\r\n            clearRefElementValue(referenceToInputElement);\r\n            updateWordsPerMinute();\r\n        }\r\n    }\r\n\r\n    function updateWordsPerMinute(): void {\r\n        if (wordArrayIndex === 0) {\r\n            setStartDateInMilisseconds(Date.now());\r\n        } else if (wordArrayIndex === wordArraySize - 1) {\r\n            setWordsPerMinute(getWordsPerMinute());\r\n        }\r\n    }\r\n\r\n    function getWordsPerMinute(): number {\r\n        return Math.floor((wordArraySize / ((Date.now() - startDateInMilisseconds) / 1000 / 60)));\r\n    }\r\n\r\n    function resetComponentState(): void {\r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordArrayIndex(typingInputInitialState.wordArrayIndex);\r\n        setWordsPerMinute(typingInputInitialState.wordsPerMinute);\r\n\r\n        foregroundElements?.forEach(span => span.style.color = foregroundColor ? foregroundColor : '#FFFFFF');\r\n\r\n        clearRefElementValue(referenceToInputElement);\r\n        referenceToInputElement.current?.focus();\r\n    }\r\n\r\n    function clearRefElementValue(referenceToElement: React.RefObject<HTMLInputElement | null>): void {\r\n        if (referenceToElement && referenceToElement.current)\r\n            referenceToElement.current.value = '';\r\n    }\r\n\r\n    function checkInputValue(insertedWord: string | null): void {\r\n        const currentWord = wordArray[wordArrayIndex];\r\n        const currentSpanElement: HTMLSpanElement | null = document.querySelector<HTMLSpanElement>(`#${currentWord}${wordArrayIndex}`);\r\n\r\n        let colorToFillSpanElementWith = \"\";\r\n        \r\n        insertedWord !== currentWord ? colorToFillSpanElementWith = \"#FF0000\" : colorToFillSpanElementWith = \"#1ED760\";\r\n        \r\n        markWordElementAsTypedIfElementFound(currentSpanElement, colorToFillSpanElementWith);\r\n        \r\n        setWordArrayIndex(wordArrayIndex + 1);\r\n    }\r\n\r\n    function markWordElementAsTypedIfElementFound(wordElement: HTMLElement | null, color: string): void {\r\n        if (wordElement)\r\n            wordElement.style.color = color;\r\n    }\r\n\r\n    function handleColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToColorPickerDiv.current) {\r\n            if (referenceToColorPickerDiv.current?.style.display === \"none\") {\r\n                setColorPickerIsActive(true);\r\n                referenceToColorPickerDiv.current.style.display = \"block\";\r\n            } else {\r\n                setColorPickerIsActive(false);\r\n                referenceToColorPickerDiv.current.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleBackgroundColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToBackgroundColorPickerDiv.current) {\r\n            if (referenceToBackgroundColorPickerDiv.current?.style.display === \"none\") {\r\n                referenceToBackgroundColorPickerDiv.current.style.display = \"block\";\r\n            } else {\r\n                referenceToBackgroundColorPickerDiv.current.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleForegroundColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToForegroundColorPickerDiv.current) {\r\n            if (referenceToForegroundColorPickerDiv.current?.style.display === \"none\") {\r\n                referenceToForegroundColorPickerDiv.current.style.display = \"block\";\r\n            } else {\r\n                referenceToForegroundColorPickerDiv.current.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function hideColorPickerDivs() {\r\n        const colorPickerDivArray: NodeListOf<HTMLDivElement> = document.querySelectorAll<HTMLDivElement>(\".color-picker\");\r\n        colorPickerDivArray.forEach((el: HTMLDivElement) => { el.style.display = \"none\" });\r\n    }\r\n\r\n    function handleBackgroundColorChange(colorHex: string) {\r\n        if (backgroundElements && backgroundElements.length > 0) {\r\n            backgroundElements.forEach((element: HTMLDivElement) => element.style.background = colorHex);\r\n            setBackgroundColor(colorHex);\r\n\r\n            window.localStorage.setItem('tstbg', backgroundColor);\r\n        }\r\n    }\r\n\r\n    function handleForegroundColorChange(colorHex: string) {\r\n        if (foregroundElements && foregroundElements.length > 0) {\r\n            foregroundElements.forEach((element: HTMLSpanElement) => element.style.color = colorHex);\r\n            setForegroundColor(colorHex);\r\n\r\n            window.localStorage.setItem('tstfg', foregroundColor);\r\n        }\r\n    }\r\n\r\n    function handleColorReset() {\r\n        localStorage.setItem('tstbg', defaultBackgroundColor);\r\n        localStorage.setItem('tstfg', defaultForegroundColor);\r\n\r\n        setBackgroundColor(defaultBackgroundColor);\r\n        setForegroundColor(defaultForegroundColor);\r\n\r\n        // TODO: fix me \r\n        // This should be \"just\" reloading the page; The component state should be reloaded\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divMainInput\">\r\n                <button type=\"button\" className={\"change-color-buttons\"} onClick={handleColorReset}>Reset Colors</button>\r\n                <button type=\"button\" className={\"change-color change-color-buttons\"} onClick={handleColorPickerClick}><span ref={referenceToChangeColorsText}>Change Colors</span></button>\r\n                <div id=\"div-color-picker\" ref={referenceToColorPickerDiv} style={{display: \"none\"}}>\r\n                    <button type=\"button\" className={\"change-background change-color-buttons\"} onClick={handleBackgroundColorPickerClick}>Background <span role=\"img\" aria-label=\"paintbrush\">🖌️</span></button>\r\n                    <button type=\"button\" className={\"change-foreground change-color-buttons\"} onClick={handleForegroundColorPickerClick}>Foreground <span role=\"img\" aria-label=\"paintbrush\">🖌️</span></button>\r\n                </div>\r\n\r\n                <div style={{display: 'none'}} ref={referenceToBackgroundColorPickerDiv} className={\"color-picker\"}>\r\n                    <HexColorPicker color={backgroundColor} onChange={(color) => { handleBackgroundColorChange(color) }} />\r\n                </div>\r\n\r\n                <div style={{display: 'none'}} ref={referenceToForegroundColorPickerDiv} className={\"color-picker\"}>\r\n                    <HexColorPicker color={foregroundColor} onChange={(color) => { handleForegroundColorChange(color) }} />\r\n                </div>\r\n\r\n                <span id=\"span-reset-typing-input-state\" onClick={resetComponentState}></span>\r\n                <div id=\"divMainWords\">\r\n                    {wordArray.map((word, index) => (<span className={\"foreground\"} id={`${word}${index}`} key={index}>{word}&nbsp;</span>))}\r\n                </div>\r\n                <div id=\"divWithLabelAndInput\">\r\n                    <label htmlFor=\"mainInput\">Type here (press esc to reset):</label>\r\n                    <input\r\n                        id=\"mainInput\"\r\n                        ref={referenceToInputElement}\r\n                        type=\"text\" autoComplete=\"off\"\r\n                        onKeyPress={(evt) => { handleKeyPress(evt); }}\r\n                    />\r\n                </div>\r\n                <Results currentNumberOfWordsPerMinute={wordsPerMinute} />\r\n            </div>\r\n        </>\r\n    )\r\n}","import './App.css';\r\nimport React from 'react';\r\nimport Footer from './Footer/Footer';\r\nimport TypingInput from './TypingInput/TypingInput';\r\nimport triggerHeaderAnimation from './utils/triggerHeaderAnimation';\r\nimport addEscEventListenerToWindow from './utils/addEscEventListenerToWindow';\r\nimport setLocalStorageColorsToOnLoad from './utils/setLocalStorageColorsToOnLoad';\r\n\r\nexport default function App() {\r\n  triggerHeaderAnimation();\r\n  addEscEventListenerToWindow();\r\n  setLocalStorageColorsToOnLoad();\r\n\r\n  return (\r\n    <div className=\"App background\">\r\n      <header className=\"App-header background\">\r\n        <h3>Typing Speed Test<span id=\"header-pipe\">|</span></h3>\r\n      </header>\r\n\r\n      <main>\r\n        <TypingInput />\r\n      </main>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}","export default function triggerHeaderAnimation(): void {\r\n    setInterval(() => {\r\n        const headerPipe = document.getElementById(\"header-pipe\");\r\n        if (headerPipe) {\r\n            headerPipe.style.display !== \"none\" \r\n            ? headerPipe.style.display = \"none\" \r\n            : headerPipe.style.display = \"inline\";\r\n        }\r\n    }, 600);\r\n}","export default function addEscEventListenerToWindow(): void {\r\n    window.addEventListener('keyup', (evt: KeyboardEvent) => {\r\n        if (evt.key === \"Escape\") {\r\n            const spanElement: HTMLSpanElement | null = document.querySelector('#span-reset-typing-input-state');\r\n            spanElement?.click();\r\n        }\r\n    });\r\n}","export default function setLocalStorageColorsToOnLoad() {\r\n    window.onload = function () {\r\n        const backgroundElements: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.background');\r\n        const foregroundElements: NodeListOf<HTMLSpanElement> | null = document.querySelectorAll('.foreground');\r\n\r\n        if (localStorage['tstbg']) {\r\n            backgroundElements.forEach((element: HTMLDivElement) => element.style.background = localStorage['tstbg']);\r\n        }\r\n\r\n        if (localStorage['tstfg']) {\r\n            foregroundElements.forEach((element: HTMLSpanElement) => element.style.color = localStorage['tstfg']);\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}