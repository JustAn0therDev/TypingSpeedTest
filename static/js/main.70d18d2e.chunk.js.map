{"version":3,"sources":["Footer/github.svg","Footer/Footer.tsx","Results/Results.tsx","utils/getSpecifiedNumberOfRandomWords.ts","TypingInput/TypingInput.tsx","App.tsx","utils/triggerHeaderAnimation.ts","utils/addEscEventListenerToWindow.ts","utils/setLocalStorageColorsToOnLoad.ts","index.tsx"],"names":["Footer","href","target","rel","src","GitHubLogo","alt","Results","props","useState","wordsPerMinute","setWordsPerMinute","useEffect","currentNumberOfWordsPerMinute","id","className","getSpecifiedNumberOfRandomWords","numberOfRandomWords","arrayToReturn","Array","i","push","words","Math","floor","random","typingInputInitialState","TypingInput","wordArraySize","backgroundElements","document","querySelectorAll","foregroundElements","referenceToInputElement","useRef","referenceToColorPickerDiv","referenceToBackgroundColorPickerDiv","referenceToForegroundColorPickerDiv","referenceToBackgroundColorPicker","referenceToForegroundColorPicker","referenceToChangeColorsText","wordArrayIndex","setWordArrayIndex","foregroundColor","setForegroundColor","backgroundColor","setBackgroundColor","wordArray","setWordArray","startDateInMilisseconds","setStartDateInMilisseconds","colorPickerIsActive","setColorPickerIsActive","handleKeyPress","event","key","insertedWord","currentWord","currentSpanElement","getElementById","colorToPutOnSpanElement","wordElement","color","style","checkInputValue","currentTarget","value","trim","clearRefElementValue","Date","now","referenceToElement","current","hideColorPickerDivs","forEach","el","display","localStorageBackground","window","localStorage","getItem","localStorageForeground","focus","toString","textContent","type","onClick","removeItem","location","reload","ref","role","aria-label","disableAlpha","onChange","colorHex","hex","length","element","background","setItem","span","map","word","index","htmlFor","autoComplete","onKeyPress","evt","App","setInterval","headerPipe","addEventListener","spanElement","querySelector","click","onload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.70d18d2e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github.ca3156b4.svg\";","import './Footer.css';\r\nimport React from 'react';\r\nimport GitHubLogo from './github.svg';\r\n\r\nexport default function Footer(): JSX.Element {\r\n    return (\r\n        <footer>\r\n            <a href=\"https://github.com/JustAn0therDev/TypingSpeedTest\" \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\">GitHub:&nbsp;<img src={GitHubLogo} alt=\"Github Logo\"></img></a>\r\n        </footer>\r\n    )\r\n}","import './Results.css';\r\nimport IResults from '../Interfaces/IResults';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport default function Results(props: IResults): JSX.Element {\r\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWordsPerMinute(props.currentNumberOfWordsPerMinute);\r\n    }, [props.currentNumberOfWordsPerMinute]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divResults\">\r\n                <h1 className={\"foreground\"}>{wordsPerMinute} WPM</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}","import words from '../words.json';\r\n\r\nexport default function getSpecifiedNumberOfRandomWords(numberOfRandomWords: number) {\r\n    var arrayToReturn: string[] = new Array<string>();\r\n    for (let i = 0; i < numberOfRandomWords; i++) {\r\n        arrayToReturn.push(words['english'][Math.floor(Math.random() * 1000)]);\r\n    }\r\n\r\n    return arrayToReturn;\r\n}","import './TypingInput.css';\r\nimport Results from '../Results/Results';\r\nimport { ChromePicker, ColorResult } from 'react-color';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ITypingInputInitialState from '../Interfaces/ITypingInputInitialState';\r\nimport getSpecifiedNumberOfRandomWords from '../utils/getSpecifiedNumberOfRandomWords';\r\n\r\nconst typingInputInitialState: ITypingInputInitialState = {\r\n    wordArrayIndex: 0,\r\n    wordsPerMinute: 0,\r\n    startDateInMilisseconds: 0\r\n}\r\n\r\nexport default function TypingInput(): JSX.Element {\r\n    const wordArraySize = 15;\r\n    const backgroundElements: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.background');\r\n    const foregroundElements: NodeListOf<HTMLSpanElement> | null = document.querySelectorAll('.foreground');\r\n\r\n    // Refs to mutable elements inside component.\r\n    const referenceToInputElement = useRef<HTMLInputElement>(null);\r\n    const referenceToColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToBackgroundColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToForegroundColorPickerDiv = useRef<HTMLDivElement>(null);\r\n    const referenceToBackgroundColorPicker = useRef<ChromePicker>(null);\r\n    const referenceToForegroundColorPicker = useRef<ChromePicker>(null);\r\n    const referenceToChangeColorsText = useRef<HTMLSpanElement>(null);\r\n\r\n    // State management\r\n    let [wordArrayIndex, setWordArrayIndex] = useState(0);\r\n    let [wordsPerMinute, setWordsPerMinute] = useState(0);\r\n    let [foregroundColor, setForegroundColor] = useState(\"\");\r\n    let [backgroundColor, setBackgroundColor] = useState(\"\");\r\n    let [wordArray, setWordArray] = useState(new Array<string>());\r\n    let [startDateInMilisseconds, setStartDateInMilisseconds] = useState(0);\r\n    let [colorPickerIsActive, setColorPickerIsActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const localStorageBackground: String | null = window.localStorage.getItem('tstbg');\r\n        const localStorageForeground: String | null = window.localStorage.getItem('tstfg');\r\n        \r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordsPerMinute(0);\r\n        referenceToInputElement.current?.focus();\r\n\r\n        if (localStorageBackground) {\r\n            setBackgroundColor(localStorageBackground.toString());\r\n        }\r\n\r\n        if (localStorageForeground) {\r\n            setForegroundColor(localStorageForeground.toString());\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (referenceToChangeColorsText.current) {\r\n            referenceToChangeColorsText.current.textContent = \"\";\r\n            if (colorPickerIsActive) {\r\n                referenceToChangeColorsText.current.textContent = \"Close\";\r\n            } else {\r\n                referenceToChangeColorsText.current.textContent = \"Change Colors\";\r\n            }\r\n        }\r\n    }, [colorPickerIsActive])\r\n\r\n    function handleKeyPress(event: React.KeyboardEvent): void {\r\n        if (event.key === ' ') {\r\n            checkInputValue(event.currentTarget.value.trim());\r\n            clearRefElementValue(referenceToInputElement);\r\n            updateWordsPerMinute();\r\n        }\r\n    }\r\n\r\n    function updateWordsPerMinute(): void {\r\n        if (wordArrayIndex === 0) {\r\n            setStartDateInMilisseconds(Date.now());\r\n        } else if (wordArrayIndex === wordArraySize - 1) {\r\n            setWordsPerMinute(getWordsPerMinute());\r\n        }\r\n    }\r\n\r\n    function getWordsPerMinute(): number {\r\n        return Math.floor((wordArraySize / ((Date.now() - startDateInMilisseconds) / 1000 / 60)));\r\n    }\r\n\r\n    function resetComponentState(): void {\r\n        setWordArray(getSpecifiedNumberOfRandomWords(wordArraySize));\r\n        setWordArrayIndex(typingInputInitialState.wordArrayIndex);\r\n        setWordsPerMinute(typingInputInitialState.wordsPerMinute);\r\n\r\n        foregroundElements?.forEach(span => span.style.color = foregroundColor ? foregroundColor : '#FFFFFF');\r\n\r\n        clearRefElementValue(referenceToInputElement);\r\n        referenceToInputElement.current?.focus();\r\n    }\r\n\r\n    function clearRefElementValue(referenceToElement: React.RefObject<HTMLInputElement | null>): void {\r\n        if (referenceToElement && referenceToElement.current)\r\n            referenceToElement.current.value = '';\r\n    }\r\n\r\n    function checkInputValue(insertedWord: string | null): void {\r\n        const currentWord = wordArray[wordArrayIndex];\r\n        const currentSpanElement: HTMLElement | null = document.getElementById(`${currentWord}${wordArrayIndex}`);\r\n\r\n        let colorToPutOnSpanElement = \"\";\r\n        \r\n        insertedWord !== currentWord \r\n        ? colorToPutOnSpanElement = \"#FF0000\" \r\n        : colorToPutOnSpanElement = \"#1ED760\";\r\n        \r\n        if (currentSpanElement)\r\n           markWordElementAsTyped(currentSpanElement, colorToPutOnSpanElement);\r\n        \r\n        setWordArrayIndex(wordArrayIndex + 1);\r\n    }\r\n\r\n    function markWordElementAsTyped(wordElement: HTMLElement, color: string): void {\r\n        wordElement.style.color = color;\r\n    }\r\n\r\n    function handleColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToColorPickerDiv.current) {\r\n            if (referenceToColorPickerDiv.current?.style.display === \"none\") {\r\n                setColorPickerIsActive(true);\r\n                referenceToColorPickerDiv.current.style.display = \"block\";\r\n            } else {\r\n                setColorPickerIsActive(false);\r\n                referenceToColorPickerDiv.current.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleBackgroundColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToBackgroundColorPickerDiv.current) {\r\n            if (referenceToBackgroundColorPickerDiv.current?.style.display === \"none\") {\r\n                referenceToBackgroundColorPickerDiv.current.style.display = \"block\";\r\n            } else {\r\n                referenceToBackgroundColorPickerDiv.current.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleForegroundColorPickerClick() {\r\n        hideColorPickerDivs();\r\n        if (referenceToForegroundColorPickerDiv.current) {\r\n            if (referenceToForegroundColorPickerDiv.current?.style.display === \"none\") {\r\n                referenceToForegroundColorPickerDiv.current.style.display = \"block\";\r\n            } else {\r\n                referenceToForegroundColorPickerDiv.current.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    function hideColorPickerDivs() {\r\n        const colorPickerDivArray: NodeListOf<HTMLDivElement> = document.querySelectorAll(\".color-picker\");\r\n        colorPickerDivArray.forEach((el: HTMLDivElement) => { el.style.display = \"none\" });\r\n    }\r\n\r\n    function handleBackgroundColorChange(colorHex: string) {\r\n        if (backgroundElements && backgroundElements.length > 0) {\r\n            backgroundElements.forEach((element: HTMLDivElement) => element.style.background = colorHex);\r\n            setBackgroundColor(colorHex);\r\n            window.localStorage.setItem('tstbg', backgroundColor);\r\n        }\r\n    }\r\n\r\n    function handleForegroundColorChange(colorHex: string) {\r\n        if (foregroundElements && foregroundElements.length > 0) {\r\n            foregroundElements.forEach((element: HTMLSpanElement) => element.style.color = colorHex);\r\n            setForegroundColor(colorHex);\r\n            window.localStorage.setItem('tstfg', foregroundColor);\r\n        }\r\n    }\r\n\r\n    function handleColorReset() {\r\n        window.localStorage.removeItem('tstbg');\r\n        window.localStorage.removeItem('tstfg');\r\n\r\n        setBackgroundColor(\"#000000\");\r\n        setForegroundColor(\"#FFFFFF\");\r\n        \r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"divMainInput\">\r\n                <button type=\"button\" className={\"change-color-buttons\"} onClick={handleColorReset}>Reset Colors</button>\r\n                <button type=\"button\" className={\"change-color change-color-buttons\"} onClick={handleColorPickerClick}><span ref={referenceToChangeColorsText}>Change Colors</span></button>\r\n                <div id=\"div-color-picker\" ref={referenceToColorPickerDiv} style={{display: \"none\"}}>\r\n                    <button type=\"button\" className={\"change-background change-color-buttons\"} onClick={handleBackgroundColorPickerClick}>Background <span role=\"img\" aria-label=\"paintbrush\">🖌️</span></button>\r\n                    <button type=\"button\" className={\"change-foreground change-color-buttons\"} onClick={handleForegroundColorPickerClick}>Foreground <span role=\"img\" aria-label=\"paintbrush\">🖌️</span></button>\r\n                </div>\r\n\r\n                <div style={{display: 'none'}} ref={referenceToBackgroundColorPickerDiv} className={\"color-picker\"}>\r\n                    <ChromePicker disableAlpha={true} color={backgroundColor} ref={referenceToBackgroundColorPicker} onChange={(color: ColorResult) => { handleBackgroundColorChange(color.hex) }} />\r\n                </div>\r\n\r\n                <div style={{display: 'none'}} ref={referenceToForegroundColorPickerDiv} className={\"color-picker\"}>\r\n                    <ChromePicker disableAlpha={true} color={foregroundColor} ref={referenceToForegroundColorPicker} onChange={(color: ColorResult) => { handleForegroundColorChange(color.hex) }} />\r\n                </div>\r\n\r\n                <span id=\"span-reset-typing-input-state\" onClick={resetComponentState}></span>\r\n                <div id=\"divMainWords\">\r\n                    {wordArray.map((word, index) => (<span className={\"foreground\"} id={`${word}${index}`} key={index}>{word}&nbsp;</span>))}\r\n                </div>\r\n                <div id=\"divWithLabelAndInput\">\r\n                    <label htmlFor=\"mainInput\">Type here (press esc to reset):</label>\r\n                    <input\r\n                        id=\"mainInput\"\r\n                        ref={referenceToInputElement}\r\n                        type=\"text\" autoComplete=\"off\"\r\n                        onKeyPress={(evt) => { handleKeyPress(evt); }}\r\n                    />\r\n                </div>\r\n                <Results currentNumberOfWordsPerMinute={wordsPerMinute} />\r\n            </div>\r\n        </>\r\n    )\r\n}","import './App.css';\r\nimport React from 'react';\r\nimport Footer from './Footer/Footer';\r\nimport TypingInput from './TypingInput/TypingInput';\r\nimport triggerHeaderAnimation from './utils/triggerHeaderAnimation';\r\nimport addEscEventListenerToWindow from './utils/addEscEventListenerToWindow';\r\nimport setLocalStorageColorsToOnLoad from './utils/setLocalStorageColorsToOnLoad';\r\n\r\nexport default function App() {\r\n  triggerHeaderAnimation();\r\n  addEscEventListenerToWindow();\r\n  setLocalStorageColorsToOnLoad();\r\n\r\n  return (\r\n    <div className=\"App background\">\r\n      <header className=\"App-header background\">\r\n        <h3>Typing Speed Test<span id=\"header-pipe\">|</span></h3>\r\n      </header>\r\n\r\n      <main>\r\n        <TypingInput />\r\n      </main>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}","export default function triggerHeaderAnimation(): void {\r\n    setInterval(() => {\r\n        const headerPipe = document.getElementById(\"header-pipe\");\r\n        if (headerPipe) {\r\n            headerPipe.style.display !== \"none\" \r\n            ? headerPipe.style.display = \"none\" \r\n            : headerPipe.style.display = \"inline\";\r\n        }\r\n    }, 600);\r\n}","export default function addEscEventListenerToWindow(): void {\r\n    window.addEventListener('keyup', (evt: KeyboardEvent) => {\r\n        if (evt.key === \"Escape\") {\r\n            const spanElement: HTMLSpanElement | null = document.querySelector('#span-reset-typing-input-state');\r\n            spanElement?.click();\r\n        }\r\n    });\r\n}","export default function setLocalStorageColorsToOnLoad() {\r\n    window.onload = function () {\r\n        const backgroundElements: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.background');\r\n        const foregroundElements: NodeListOf<HTMLSpanElement> | null = document.querySelectorAll('.foreground');\r\n\r\n        if (localStorage['tstbg']) {\r\n            backgroundElements.forEach((element: HTMLDivElement) => element.style.background = localStorage['tstbg']);\r\n        }\r\n\r\n        if (localStorage['tstfg']) {\r\n            foregroundElements.forEach((element: HTMLSpanElement) => element.style.color = localStorage['tstfg']);\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}